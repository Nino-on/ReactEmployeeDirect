{"version":3,"sources":["components/employee_list.js","components/search.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","className","scope","id","name","occupation","location","Searchbar","useState","username","setUsername","onSubmit","e","preventDefault","handleSubmit","htmlFor","value","onChange","target","list","type","placeholder","App","state","employees","changeUserName","setState","console","log","this","filter","employee","toLowerCase","includes","map","index","key","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6+CAyBeA,MAvBf,SAAeC,GACb,OACE,2BAAOC,UAAU,uBACb,+BACI,4BACA,wBAAIC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,iBACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,cAGJ,+BACI,4BACA,wBAAIA,MAAM,OAAOF,EAAMG,IACvB,4BAAKH,EAAMI,MACX,4BAAKJ,EAAMK,YACX,4BAAKL,EAAMM,c,OCkBRC,MAjCf,SAAmBP,GAAQ,IAAD,EACQQ,mBAAS,IADjB,mBACjBC,EADiB,KACPC,EADO,KAOxB,OACE,0BAAMC,SAAU,SAACC,GACfA,EAAEC,iBACFb,EAAMc,aAAaL,IAAWR,UAAU,UAC1C,yBAAKA,UAAU,cACb,2BAAOc,QAAQ,YAAf,gBACA,2BACEC,MAAOP,EACPQ,SAZY,SAACL,GACnBF,EAAYE,EAAEM,OAAOF,QAYfZ,KAAM,WACNe,KAAK,OACLC,KAAK,OACLnB,UAAU,eACVoB,YAAY,iCACZlB,GAAG,SAEJ,yBAAKF,UAAU,QACZ,gCAAMQ,O,OC2BDa,E,4MA5CbC,MAAQ,CACNC,UAAWA,EACXf,SAAU,I,EAGZgB,eAAiB,SAAChB,GAGhB,EAAKiB,SAAS,CAAEjB,SAAUA,IAC1BkB,QAAQC,IAAI,EAAKL,Q,uDAGT,IAAD,OAEP,OADAI,QAAQC,IAAIJ,GAGV,6BACE,kBAAC,EAAD,CACEV,aAAce,KAAKJ,iBAIpBI,KAAKN,MAAMC,UAAUM,QAAO,SAAAC,GAC3B,OAAK,EAAKR,MAAMd,YAELsB,EAAS3B,KAAK4B,cAAcC,SAAS,EAAKV,MAAMd,SAASuB,kBAKnEE,KAAI,SAACH,EAAUI,GAAX,OACL,kBAAC,EAAD,CAAOC,IAAKD,EACVhC,GAAI4B,EAAS5B,GACbC,KAAM2B,EAAS3B,KACfC,WAAY0B,EAAS1B,WACrBC,SAAUyB,EAASzB,cAnBzB,S,GAjBY+B,aCGEC,QACW,cAA7BC,OAAOjC,SAASkC,UAEe,UAA7BD,OAAOjC,SAASkC,UAEhBD,OAAOjC,SAASkC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.a71cf504.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Table(props) {\n  return (\n    <table className=\"table table-striped\">\n        <thead>\n            <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Employee Name</th>\n            <th scope=\"col\">Occupation</th>\n            <th scope=\"col\">Location</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n            <th scope=\"row\">{props.id}</th>\n            <td>{props.name}</td>\n            <td>{props.occupation}</td>\n            <td>{props.location}</td>\n            </tr>\n            </tbody>\n  </table>\n  );\n}\n\nexport default Table;\n\n","import React, {useState}from \"react\";\n\n\nfunction Searchbar(props) {\n  const [username ,setUsername] = useState(\"\");\n\nconst handleInput = (e)=>{\n  setUsername(e.target.value);\n}\n\n  return (\n    <form onSubmit={(e)=>{\n      e.preventDefault()\n      props.handleSubmit(username)}}className=\"search\">\n    <div className=\"form-group\">\n      <label htmlFor=\"language\">Search Term:</label>\n      <input\n        value={username}\n        onChange={handleInput}\n        name= \"username\"\n        list=\"term\"\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Type in a search term to begin\"\n        id=\"term\"\n      />\n       <div className=\"mt-4\">\n          <h3> {username}</h3>\n          \n        </div>\n      \n    </div>\n  </form>\n  );\n}\n\nexport default Searchbar;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './components/employee_list.js';\nimport Searchbar from './components/search.js';\nimport employees from './Employees.json';\n\n\n\n\nclass App extends Component {\n  state = {\n    employees: employees,\n    username: \"\"\n  };\n\n  changeUserName = (username) => {\n\n\n    this.setState({ username: username });\n    console.log(this.state)\n  }\n\n  render() {\n    console.log(employees)\n    return (\n\n      <div>\n        <Searchbar\n          handleSubmit={this.changeUserName}\n\n\n        />\n        {this.state.employees.filter(employee => {\n          if (!this.state.username) {\n            return true\n          } else if (employee.name.toLowerCase().includes(this.state.username.toLowerCase())) {\n            return true\n          } else {\n            return false\n          }\n        }).map((employee, index) => (\n          <Table key={index}\n            id={employee.id}\n            name={employee.name}\n            occupation={employee.occupation}\n            location={employee.location}\n          />\n\n        ))};\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}